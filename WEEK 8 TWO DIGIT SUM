ORG 100h
mov dx, offset msg_input1
mov ah, 09h
int 21h
mov ah, 01h
int 21h
mov bl, al               ; Store first digit in BL
cmp al, '0'              ; Check if it's a valid digit
jl NotDigit
cmp al, '9'
jg NotDigit
mov dx, offset msg_output1
mov ah, 09h
int 21h
mov dl, bl
mov ah, 02h
int 21h
mov dx, offset msg_input2
mov ah, 09h
int 21h
mov ah, 01h
int 21h
mov cl, al               ; Store second digit in CL
cmp al, '0'              ; Check if it's a valid digit
jl NotDigit
cmp al, '9'
jg NotDigit
mov dx, offset msg_output2
mov ah, 09h
int 21h
mov dl, cl
mov ah, 02h
int 21h
mov dx, offset msg_add
mov ah, 09h
int 21h
sub bl, '0'              ; Convert first digit from ASCII to numeric value
sub cl, '0'              ; Convert second digit from ASCII to numeric value
add bl, cl      
cmp bl, 10
jl SingleDigit   
mov dl, 1                ; Tens place is 1 for numbers between 10-18
add dl, '0'              ; Convert tens place to ASCII
mov ah, 02h
int 21h
sub bl, 10               ; Adjust result for ones place (subtract 10)
add bl, '0'              ; Convert ones place to ASCII
mov dl, bl
mov ah, 02h
int 21h
jmp endprogram
SingleDigit:
add bl, '0'              ; Convert the result to ASCII
mov dl, bl
mov ah, 02h
int 21h
jmp endprogram
NotDigit:
mov dx, offset msg_error
mov ah, 09h
int 21h
endprogram:
mov ah, 4Ch
int 21h
; Data section
msg_input1 DB "Enter first digit: $"
msg_output1 DB 0Dh, 0Ah, "The first digit is: $"
msg_input2 DB 0Dh, 0Ah, "Enter second digit: $"
msg_output2 DB 0Dh, 0Ah, "The second digit is: $"
msg_add DB 0Dh, 0Ah, "The addition of the two digits is: $"
msg_error DB 0Dh, 0Ah, "Error: Not a digit!$"
